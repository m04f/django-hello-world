# Generated by Django 4.2.19 on 2025-05-08 13:21

from django.db import migrations

def add_plans(apps, schema_editor):
    Plan = apps.get_model('workout', 'Plan')
    PlanWorkout = apps.get_model('workout', 'PlanWorkout')
    Workout = apps.get_model('workout', 'Workout')
    User = apps.get_model('auth', 'User')

    workouts = {w.name: w for w in Workout.objects.all()}
    ai_coach = User.objects.get(username="Ai Coach")

    # Beginner Strength Plan
    beginner_plan, _ = Plan.objects.get_or_create(
        name="Beginner Strength Plan",
        defaults={
            "creator": ai_coach,
            "description": "An 8-week beginner-friendly strength training plan focusing on compound lifts.",
            "notes": "Alternate days with rest. Maintain good form.",
            "public": True,
        },
    )

    beginner_weekly_schedule = [
        (1, "Full Body Strength"),
        (3, "Push Day Hypertrophy"),
        (5, "Lower Body Burn"),
    ]

    for week in range(8):
        for day_offset, workout_name in beginner_weekly_schedule:
            if workout_name in workouts:
                PlanWorkout.objects.create(
                    plan=beginner_plan,
                    workout=workouts[workout_name],
                    day=week * 7 + day_offset
                )

    # Fat Loss Conditioning Plan
    fat_loss_plan, _ = Plan.objects.get_or_create(
        name="Fat Loss Conditioning Plan",
        defaults={
            "creator": ai_coach,
            "description": "An 8-week high-intensity fat loss plan focused on endurance and conditioning.",
            "notes": "Keep rest short. Track your heart rate.",
            "public": True,
        },
    )

    fat_loss_weekly_schedule = [
        (1, "Cardio Conditioning"),
        (3, "Lower Body Burn"),
        (5, "Upper Body Power"),
    ]

    for week in range(8):
        for day_offset, workout_name in fat_loss_weekly_schedule:
            if workout_name in workouts:
                PlanWorkout.objects.create(
                    plan=fat_loss_plan,
                    workout=workouts[workout_name],
                    day=week * 7 + day_offset
                )


class Migration(migrations.Migration):

    dependencies = [
        ('workout', '0003_workout_data'),
    ]

    operations = [
        migrations.RunPython(add_plans),
    ]
