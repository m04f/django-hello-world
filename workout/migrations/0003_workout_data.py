# Generated by Django 4.2.19 on 2025-05-07 11:15

from django.db import migrations

def add_ai_coach(apps, schema_editor):
    User = apps.get_model('auth', 'User')
    ai_coach, _ = User.objects.get_or_create(username="Ai Coach")

def add_new_exercises(apps, schema_editor):
    Exercise = apps.get_model('workout', 'Exercise')
    Muscle = apps.get_model('workout', 'Muscle')
    User = apps.get_model('auth', 'User')

    ai_coach = User.objects.get(username="Ai Coach")
    muscle_ids = {muscle.name: muscle.id for muscle in Muscle.objects.all()}

    new_exercises = [
        {
            "name": "Barbell Squat",
            "description": "A foundational compound movement targeting the legs and core.",
            "muscles": ["Quadriceps", "Hamstrings", "Glutes", "Core"]
        },
        {
            "name": "Bench Press",
            "description": "A primary chest exercise that also targets the shoulders and triceps.",
            "muscles": ["Chest", "Triceps", "Shoulders"]
        },
        {
            "name": "Pull-Up",
            "description": "A bodyweight exercise that develops back and biceps strength.",
            "muscles": ["Lats", "Biceps", "Forearms", "Core"]
        },
        {
            "name": "Plank",
            "description": "An isometric core stabilization exercise.",
            "muscles": ["Core", "Shoulders", "Glutes"]
        },
        {
            "name": "Incline Dumbbell Press",
            "description": "Targets the upper chest and shoulders.",
            "muscles": ["Chest", "Shoulders", "Triceps"]
        },
        {
            "name": "Overhead Press",
            "description": "A compound shoulder exercise involving the triceps and upper chest.",
            "muscles": ["Shoulders", "Triceps", "Upper Chest"]
        },
        {
            "name": "Triceps Dips",
            "description": "Bodyweight exercise to isolate and strengthen triceps.",
            "muscles": ["Triceps", "Chest", "Shoulders"]
        },
        {
            "name": "Lateral Raise",
            "description": "Isolation exercise for shoulder width development.",
            "muscles": ["Shoulders"]
        },
        {
            "name": "Bodyweight Lunges",
            "description": "Lower body exercise for quads, hamstrings, and balance.",
            "muscles": ["Quadriceps", "Glutes", "Hamstrings", "Calves"]
        },
        {
            "name": "Romanian Deadlift",
            "description": "Targets the hamstrings and glutes using hip hinge movement.",
            "muscles": ["Hamstrings", "Glutes", "Lower Back"]
        },
        {
            "name": "Goblet Squat",
            "description": "A front-loaded squat variation for lower body and core.",
            "muscles": ["Quadriceps", "Glutes", "Core"]
        },
        {
            "name": "Wall Sit",
            "description": "An isometric leg endurance exercise.",
            "muscles": ["Quadriceps", "Glutes", "Calves"]
        },
        {
            "name": "Jump Rope",
            "description": "A cardio exercise that also builds coordination and lower leg strength.",
            "muscles": ["Calves", "Quads", "Hamstrings", "Core"]
        },
        {
            "name": "Burpees",
            "description": "Full-body cardio exercise with strength and explosive components.",
            "muscles": ["Chest", "Quads", "Core", "Shoulders"]
        },
        {
            "name": "Mountain Climbers",
            "description": "A dynamic plank-based cardio movement.",
            "muscles": ["Core", "Shoulders", "Quads"]
        },
        {
            "name": "High Knees",
            "description": "Cardio exercise that targets hip flexors and core.",
            "muscles": ["Hip Flexors", "Core", "Calves"]
        },
        {
            "name": "Deadlift",
            "description": "A compound movement targeting the posterior chain.",
            "muscles": ["Hamstrings", "Glutes", "Lower Back", "Traps"]
        },
        {
            "name": "Barbell Row",
            "description": "A bent-over pulling exercise for back and arms.",
            "muscles": ["Lats", "Traps", "Biceps", "Rear Deltoids"]
        },
        {
            "name": "Push-Up",
            "description": "A basic bodyweight movement for chest and triceps.",
            "muscles": ["Chest", "Triceps", "Shoulders", "Core"]
        },
        {
            "name": "Hammer Curl",
            "description": "A biceps curl variation that also targets the forearms.",
            "muscles": ["Biceps", "Forearms"]
        }
    ]

    for exercise in new_exercises:
        if not Exercise.objects.filter(name=exercise["name"]).exists():
            new_exercise = Exercise.objects.create(name=exercise["name"], description=exercise["description"])
            new_exercise.muscles.set([muscle_ids[muscle] for muscle in exercise["muscles"] if muscle in muscle_ids])


def add_workouts(apps, schema_editor):
    Workout = apps.get_model('workout', 'Workout')
    Exercise = apps.get_model('workout', 'Exercise')
    WorkoutExercise = apps.get_model('workout', 'WorkoutExercise')

    exercises_map = {exercise.name: exercise for exercise in Exercise.objects.all()}

    new_workouts = [
        {
            "name": "Full Body Strength",
            "description": "A compound-focused strength workout targeting all major muscle groups.",
            "exercises": [
                {
                    "exercise": "Barbell Squat",
                    "reps": 5,
                    "sets": 5,
                    "weight": 100,
                    "rest": 180,
                    "duration": None
                },
                {
                    "exercise": "Bench Press",
                    "reps": 6,
                    "sets": 4,
                    "weight": 80,
                    "rest": 180,
                    "duration": None
                },
                {
                    "exercise": "Pull-Up",
                    "reps": 10,
                    "sets": 4,
                    "rest": 120,
                    "duration": None
                },
                {
                    "exercise": "Plank",
                    "duration": 45,
                    "sets": 3,
                    "rest": 120
                }
            ],
            "notes": "Use a spotter for weighted lifts. Rest strictly between sets.",
            "public": True
        },
        {
            "name": "Push Day Hypertrophy",
            "description": "A hypertrophy workout focusing on chest, shoulders, and triceps.",
            "exercises": [
                {
                    "exercise": "Incline Dumbbell Press",
                    "reps": 12,
                    "sets": 4,
                    "weight": 25,
                    "rest": 120,
                    "duration": None
                },
                {
                    "exercise": "Overhead Press",
                    "reps": 8,
                    "sets": 4,
                    "weight": 40,
                    "rest": 150,
                    "duration": None
                },
                {
                    "exercise": "Triceps Dips",
                    "reps": 10,
                    "sets": 4,
                    "rest": 120,
                    "duration": None
                },
                {
                    "exercise": "Lateral Raise",
                    "reps": 15,
                    "sets": 3,
                    "weight": 10,
                    "rest": 90,
                    "duration": None
                }
            ],
            "notes": "Focus on controlled tempo and avoid using momentum.",
            "public": True
        },
        {
            "name": "Lower Body Burn",
            "description": "A high-rep lower body workout for endurance and muscle tone.",
            "exercises": [
                {
                    "exercise": "Bodyweight Lunges",
                    "reps": 15,
                    "sets": 4,
                    "rest": 90,
                    "duration": None
                },
                {
                    "exercise": "Romanian Deadlift",
                    "reps": 12,
                    "sets": 4,
                    "weight": 50,
                    "rest": 120,
                    "duration": None
                },
                {
                    "exercise": "Goblet Squat",
                    "reps": 15,
                    "sets": 3,
                    "weight": 20,
                    "rest": 90,
                    "duration": None
                },
                {
                    "exercise": "Wall Sit",
                    "duration": 45,
                    "sets": 3,
                    "rest": 120
                }
            ],
            "notes": "Engage your core and maintain form throughout all movements.",
            "public": True
        },
        {
            "name": "Cardio Conditioning",
            "description": "A fast-paced cardio workout to improve endurance and burn fat.",
            "exercises": [
                {
                    "exercise": "Jump Rope",
                    "duration": 60,
                    "sets": 5,
                    "rest": 90
                },
                {
                    "exercise": "Burpees",
                    "reps": 12,
                    "sets": 4,
                    "rest": 120,
                    "duration": None
                },
                {
                    "exercise": "Mountain Climbers",
                    "duration": 45,
                    "sets": 4,
                    "rest": 120
                },
                {
                    "exercise": "High Knees",
                    "duration": 30,
                    "sets": 4,
                    "rest": 90
                }
            ],
            "notes": "Keep intensity high; minimize rest between exercises if possible.",
            "public": True
        },
        {
            "name": "Upper Body Power",
            "description": "Build upper body strength with a focus on powerlifting basics.",
            "exercises": [
                {
                    "exercise": "Deadlift",
                    "reps": 5,
                    "sets": 5,
                    "weight": 120,
                    "rest": 180,
                    "duration": None
                },
                {
                    "exercise": "Barbell Row",
                    "reps": 6,
                    "sets": 4,
                    "weight": 70,
                    "rest": 180,
                    "duration": None
                },
                {
                    "exercise": "Push-Up",
                    "reps": 15,
                    "sets": 4,
                    "rest": 90,
                    "duration": None
                },
                {
                    "exercise": "Hammer Curl",
                    "reps": 12,
                    "sets": 3,
                    "weight": 15,
                    "rest": 120,
                    "duration": None
                }
            ],
            "notes": "Use chalk and proper lifting gear for heavy lifts.",
            "public": True
        }
    ]

    for workout_data in new_workouts:
        workout = Workout.objects.create(
            creator=None,
            name=workout_data["name"],
            description=workout_data["description"],
            notes=workout_data["notes"],
            public=workout_data["public"]
        )
        for order, exercise_data in enumerate(workout_data["exercises"], start=1):
            WorkoutExercise.objects.create(
                workout=workout,
                exercise=exercises_map[exercise_data["exercise"]],
                order=order,
                reps=exercise_data.get("reps"),
                sets=exercise_data.get("sets"),
                weight=exercise_data.get("weight"),
                rest=exercise_data.get("rest"),
                duration=exercise_data.get("duration")
            )


class Migration(migrations.Migration):

    dependencies = [
        ('workout', '0002_exercise_data'),
    ]

    operations = [
        migrations.RunPython(add_ai_coach),
        migrations.RunPython(add_new_exercises),
        migrations.RunPython(add_workouts),
    ]
