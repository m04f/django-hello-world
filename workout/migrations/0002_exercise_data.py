# Generated by Django 4.2.19 on 2025-04-30 12:11

from django.db import migrations

muscles = {
    "Chest": "Primary chest muscles including pectoralis major and minor.",
    "Back": "Upper and lower back muscles including latissimus dorsi and trapezius.",
    "Shoulders": "Deltoid muscles (anterior, lateral, and posterior).",
    "Biceps": "Front of upper arm muscles that flex the elbow.",
    "Triceps": "Back of upper arm muscles that extend the elbow.",
    "Quadriceps": "Front thigh muscles that extend the knee.",
    "Hamstrings": "Back thigh muscles that flex the knee.",
    "Glutes": "Buttocks muscles including gluteus maximus, medius, and minimus.",
    "Core": "Abdominal and lower back muscles that stabilize the spine.",
    "Calves": "Lower leg muscles including gastrocnemius and soleus.",
    "Forearms": "Muscles of the lower arm that control wrist and finger movements."
}

exercises = {
    "Bench Press": {
        "description": "A compound exercise that targets the chest, shoulders, and triceps.",
        "muscles": ["Chest", "Shoulders", "Triceps"]
    },
    "Squat": {
        "description": "A compound exercise that primarily targets the quadriceps, hamstrings, and glutes.",
        "muscles": ["Quadriceps", "Hamstrings", "Glutes", "Core"]
    },
    "Deadlift": {
        "description": "A compound exercise that works the entire posterior chain.",
        "muscles": ["Back", "Hamstrings", "Glutes", "Core", "Forearms"]
    },
    "Pull-up": {
        "description": "An upper body exercise that targets the back and biceps.",
        "muscles": ["Back", "Biceps", "Forearms"]
    },
    "Push-up": {
        "description": "A bodyweight exercise that works the chest, shoulders, and triceps.",
        "muscles": ["Chest", "Shoulders", "Triceps", "Core"]
    },
    "Overhead Press": {
        "description": "A compound exercise that targets the shoulders, triceps, and upper chest.",
        "muscles": ["Shoulders", "Triceps", "Core"]
    },
    "Barbell Row": {
        "description": "A compound exercise that targets the back, biceps, and rear deltoids.",
        "muscles": ["Back", "Biceps", "Forearms", "Core"]
    },
    "Lateral Raise": {
        "description": "An isolation exercise that targets the lateral deltoids.",
        "muscles": ["Shoulders"]
    },
    "Bicep Curl": {
        "description": "An isolation exercise that targets the biceps.",
        "muscles": ["Biceps", "Forearms"]
    },
    "Tricep Extension": {
        "description": "An isolation exercise that targets the triceps.",
        "muscles": ["Triceps"]
    },
    "Lunges": {
        "description": "A unilateral exercise that targets the quadriceps, hamstrings, and glutes.",
        "muscles": ["Quadriceps", "Hamstrings", "Glutes", "Core"]
    },
    "Leg Press": {
        "description": "A compound exercise that targets the quadriceps, hamstrings, and glutes.",
        "muscles": ["Quadriceps", "Hamstrings", "Glutes"]
    },
    "Plank": {
        "description": "A core exercise that targets the abs, lower back, and shoulders.",
        "muscles": ["Core", "Shoulders"]
    },
    "Russian Twist": {
        "description": "A core exercise that targets the obliques and abs.",
        "muscles": ["Core"]
    },
    "Running": {
        "description": "A cardiovascular exercise that improves endurance and burns calories.",
        "muscles": ["Quadriceps", "Hamstrings", "Calves", "Core"]
    }
}

def add_muscles(apps, schema_editor):
    Muscle = apps.get_model('workout', 'Muscle')
    for muscle, description in muscles.items():
        Muscle.objects.create(name=muscle, description=description)

def remove_muscles(apps, schema_editor):
    Muscle = apps.get_model('workout', 'Muscle')
    for muscle, description in muscles.items():
        Muscle.objects.filter(name=muscle).delete()

def add_exercises(apps, schema_editor):
    Exercise = apps.get_model('workout', 'Exercise')
    Muscle = apps.get_model('workout', 'Muscle')
    muscle_ids = {muscle.name: muscle.id for muscle in Muscle.objects.all()}
    for exercise, data in exercises.items():
        exercise = Exercise.objects.create(name=exercise, description=data['description'])
        exercise.muscles.set([muscle_ids[muscle] for muscle in data['muscles']])

def remove_exercises(apps, schema_editor):
    Exercise = apps.get_model('workout', 'Exercise')
    for exercise, data in exercises.items():
        Exercise.objects.filter(name=exercise).delete()

class Migration(migrations.Migration):

    dependencies = [
        ('workout', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(add_muscles, remove_muscles),
        migrations.RunPython(add_exercises, remove_exercises)
    ]
